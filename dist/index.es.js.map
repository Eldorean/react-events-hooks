{"version":3,"file":"index.es.js","sources":["../src/components/EventSubject.ts","../src/components/EventSubjectRegister.ts","../src/components/EventObserver.ts","../src/components/EventHooks.ts"],"sourcesContent":["import { EventObserver } from './EventObserver';\r\nimport { SubjectRegistry } from './EventSubjectRegister';\r\n\r\nexport class EventSubject {\r\n  static New = (tag: string): EventSubject => {\r\n    const registry = SubjectRegistry.Instance;\r\n    if (registry.Exists(tag)) {\r\n      return registry.Find(tag);\r\n    } else {\r\n      return registry.Add(tag, new EventSubject(tag));\r\n    }\r\n  }\r\n  private _Observers: EventObserver[] = [];\r\n  private _Tag: string;\r\n  private constructor(tag: string) {\r\n    this._Tag = tag;\r\n  }\r\n  get Tag() { return this._Tag; }\r\n  get Count() { return this._Observers.length; }\r\n  Attach = (observer: EventObserver) => this._Observers.push(observer);\r\n  Detach = (observer: EventObserver) => {\r\n    const index = this._Observers.indexOf(observer);\r\n    if (index !== -1) {\r\n      this._Observers.splice(index, 1);\r\n    }\r\n  }\r\n  Notify = (props?: any) => this._Observers.forEach((element) => element.Update(props as any));\r\n}\r\n","import { EventSubject } from './EventSubject';\r\n\r\nexport class SubjectRegistry {\r\n  static get Instance(): SubjectRegistry {\r\n    return (\r\n      this._Instance ?\r\n        this._Instance :\r\n        this._Instance = new SubjectRegistry()\r\n    );\r\n  }\r\n  private static _Instance: SubjectRegistry;\r\n  private _Registry: { [tag: string]: EventSubject } = {};\r\n  Exists = (tag: string): boolean => !!this._Registry[tag];\r\n  Add = (tag: string, subject: EventSubject): EventSubject => {\r\n    if (this.Exists(tag)) { throw new Error(`tag ${tag} already exists`); }\r\n    this._Registry[tag] = subject;\r\n    return subject;\r\n  }\r\n  Find = (tag: string): EventSubject => {\r\n    if (!this.Exists(tag)) { throw new Error(`tag ${tag} is unknown`); }\r\n    return this._Registry[tag];\r\n  }\r\n  FindOrCreate = (tag: string): EventSubject => EventSubject.New(tag);\r\n  Destroy = (tag: string): void => { delete this._Registry[tag]; };\r\n}\r\n","import { SubjectRegistry } from './EventSubjectRegister';\r\n\r\nexport class EventObserver {\r\n  static New(tag: string, f: (props: any) => void): EventObserver;\r\n  static New(tag: string[], f: (props: any) => void): EventObserver[];\r\n  static New(tag: string | string[], f: (props: any) => void): EventObserver | EventObserver[] {\r\n    let tags: string[] = [];\r\n    tags = tags.concat(tag);\r\n\r\n    const registerFunctions = (\r\n      tags.map((t: string) => {\r\n        const observer = new EventObserver(t, (props) => f(props));\r\n        const subject = SubjectRegistry.Instance.FindOrCreate(t);\r\n        const attach = () => subject.Attach(observer);\r\n        return { observer, attach };\r\n      })\r\n    );\r\n\r\n    registerFunctions.forEach(({ attach }) => attach());\r\n    return (\r\n      !Array.isArray(tag) ?\r\n        registerFunctions[0].observer :\r\n        registerFunctions.map(({ observer }) => observer));\r\n  }\r\n  Update: (props?: any) => void;\r\n  private _Tag: string;\r\n  private constructor(tag: string, update: (props?: any) => void) {\r\n    this.Update = update;\r\n    this._Tag = tag;\r\n  }\r\n  Destroy = () => SubjectRegistry.Instance.Find(this._Tag).Detach(this);\r\n}\r\n","import { useEffect } from 'react';\r\nimport { EventObserver } from './EventObserver';\r\nimport { EventSubject } from './EventSubject';\r\nimport { SubjectRegistry } from './EventSubjectRegister';\r\n\r\nconst subjectRegistry = SubjectRegistry.Instance;\r\n\r\nexport const useNewEvent = (tag: string) => {\r\n  const subject: EventSubject = subjectRegistry.FindOrCreate(tag);\r\n  return subject.Notify;\r\n};\r\n\r\nexport const useEvent = (tag: string | string[], func: (props?: any) => void) => {\r\n  let tags: string[] = [];\r\n  tags = tags.concat(tag);\r\n\r\n  const registerFunctions = () => (\r\n    tags.map((t: string) => {\r\n      const observer = EventObserver.New(t, (props) => func(props));\r\n      return { detach: () => observer.Destroy() };\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    const registerF = registerFunctions();\r\n    return () => registerF.forEach(({ detach }) => detach());\r\n  });\r\n};\r\n"],"names":["EventSubject","tag","observer","_this","_Observers","push","index","indexOf","splice","props","forEach","element","Update","_Tag","this","length","registry","SubjectRegistry","Instance","Exists","Find","Add","_Registry","subject","Error","New","_Instance","EventObserver","update","Detach","f","tags","registerFunctions","concat","map","t","FindOrCreate","attach","Attach","Array","isArray","subjectRegistry","useNewEvent","Notify","useEvent","func","useEffect","registerF","detach","Destroy"],"mappings":"mWAGaA,EAAb,sBAWsBC,wCAFkB,eAO7B,SAACC,UAA4BC,EAAKC,WAAWC,KAAKH,gBAClD,SAACA,OACFI,EAAQH,EAAKC,WAAWG,QAAQL,IACvB,IAAXI,GACFH,EAAKC,WAAWI,OAAOF,EAAO,gBAGzB,SAACG,UAAgBN,EAAKC,WAAWM,QAAQ,SAACC,UAAYA,EAAQC,OAAOH,WAXvEI,KAAOZ,+CAEKa,KAAKD,0CACHC,KAAKV,WAAWW,aAfvC,GACSf,MAAM,SAACC,OACNe,EAAWC,EAAgBC,gBAC7BF,EAASG,OAAOlB,GACXe,EAASI,KAAKnB,GAEde,EAASK,IAAIpB,EAAK,IAAID,EAAaC,SCPnCgB,EAAb,4DASuD,eAC5C,SAAChB,WAA2BE,EAAKmB,UAAUrB,aAC9C,SAACA,EAAasB,MACdpB,EAAKgB,OAAOlB,SAAc,IAAIuB,oBAAavB,6BAC/CE,EAAKmB,UAAUrB,GAAOsB,EACfA,aAEF,SAACtB,OACDE,EAAKgB,OAAOlB,SAAc,IAAIuB,oBAAavB,yBACzCE,EAAKmB,UAAUrB,sBAET,SAACA,UAA8BD,EAAayB,IAAIxB,iBACrD,SAACA,UAA+BE,EAAKmB,UAAUrB,2DAlBrDa,KAAKY,UACHZ,KAAKY,UACLZ,KAAKY,UAAY,IAAIT,QAL7B,GCAaU,EAAb,sBAwBsB1B,EAAa2B,qCAIvB,kBAAMX,EAAgBC,SAASE,KAAKjB,EAAKU,MAAMgB,OAAO1B,SAHzDS,OAASgB,OACTf,KAAOZ,6CAvBHA,EAAwB6B,OAC7BC,EAAiB,GAGfC,GAFND,EAAOA,EAAKE,OAAOhC,IAGZiC,IAAI,SAACC,OACFjC,EAAW,IAAIyB,EAAcQ,EAAG,SAAC1B,UAAUqB,EAAErB,KAC7Cc,EAAUN,EAAgBC,SAASkB,aAAaD,SAE/C,CAAEjC,SAAAA,EAAUmC,OADJ,kBAAMd,EAAQe,OAAOpC,cAKxC8B,EAAkBtB,QAAQ,mBAAgB2B,IAAbA,YAE1BE,MAAMC,QAAQvC,GAEb+B,EAAkBE,IAAI,qBAAGhC,WADzB8B,EAAkB,GAAG9B,eAnB7B,GCGMuC,EAAkBxB,EAAgBC,SAE3BwB,EAAc,SAACzC,UACIwC,EAAgBL,aAAanC,GAC5C0C,QAGJC,EAAW,SAAC3C,EAAwB4C,OAC3Cd,EAAiB,GACrBA,EAAOA,EAAKE,OAAOhC,GASnB6C,EAAU,eACFC,EAPNhB,EAAKG,IAAI,SAACC,OACFjC,EAAWyB,EAAcF,IAAIU,EAAG,SAAC1B,UAAUoC,EAAKpC,WAC/C,CAAEuC,OAAQ,kBAAM9C,EAAS+C,qBAM3B,kBAAMF,EAAUrC,QAAQ,mBAAgBsC,IAAbA"}